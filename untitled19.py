# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r2lPbwYlzaFWOm33JG5y3P90MdKweYoA
"""

import streamlit as st
import os
from ultralytics import YOLO

# Initialize the YOLO model
model = YOLO(r"C:\user\Documents\ML_Project\Insulator\best.pt")

# Streamlit app
st.title("YOLO Object Detection with Streamlit")

# Create a file uploader for image or image folder
uploaded_file = st.file_uploader("Upload an image or folder", type=["jpg", "jpeg", "png", "gif", "bmp", "folder"], accept_multiple_files=True)

if uploaded_file is not None:
    # Check if the uploaded file is a folder or an image
    if isinstance(uploaded_file, list):  # It's a folder
        folder_path = "temp_folder"
        os.makedirs(folder_path, exist_ok=True)

        for image_file in uploaded_file:
            with open(os.path.join(folder_path, image_file.name), "wb") as f:
                f.write(image_file.read())

        # Perform detection on the folder
        detection_results = model.predict(folder_path, save=True, save_txt=True)

        # Display the detection results
        for result in detection_results.pred[0]:
            st.image(result.img_path, use_column_width=True)

    else:  # It's a single image
        # Create a temporary directory to store the image
        temp_dir = "temp_image"
        os.makedirs(temp_dir, exist_ok=True)
        image_path = os.path.join(temp_dir, uploaded_file.name)
        with open(image_path, "wb") as f:
            f.write(uploaded_file.read())

        # Perform detection on the single image
        detection_result = model.predict(image_path, save=True, save_txt=True)

        # Display the detection result
        st.image(detection_result.imgs[0], use_column_width=True)

        # Provide a download link for the result
        st.markdown(f"**Download Result**: [Result.zip]({detection_result.exported})")

# Clean up temporary files
if os.path.exists("temp_image"):
    os.rmdir("temp_image")
if os.path.exists("temp_folder"):
    for file in os.listdir("temp_folder"):
        file_path = os.path.join("temp_folder", file)
        if os.path.isfile(file_path):
            os.unlink(file_path)
    os.rmdir("temp_folder")